<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>eldarlrd Blog</title>
        <link>https://eldarlrd.github.io/eldarlrd/blog</link>
        <description>eldarlrd Blog</description>
        <lastBuildDate>Fri, 19 Jul 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[üìà Big O]]></title>
            <link>https://eldarlrd.github.io/eldarlrd/blog/2024/07/19/big-o</link>
            <guid>https://eldarlrd.github.io/eldarlrd/blog/2024/07/19/big-o</guid>
            <pubDate>Fri, 19 Jul 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[On a mathematical tool used to calculate time complexity in software algorithms.]]></description>
            <content:encoded><![CDATA[<p><strong>On a mathematical tool used to calculate time complexity in software algorithms.</strong></p>
<p>Also known as <em>Landau's notation,</em> it allows for measuring the speed of a given function based on the specifics of its implementation, where
O is the rate of growth of the function, standing for its order of approximation. This effectively allows for easier comparison of the
implementations, ultimately making it possible to deliver an optimal solution for a given problem.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="complexity">Complexity<a href="https://eldarlrd.github.io/eldarlrd/blog/2024/07/19/big-o#complexity" class="hash-link" aria-label="Direct link to Complexity" title="Direct link to Complexity">‚Äã</a></h3>
<p><a href="https://web.mit.edu/16.070/www/lecture/big_o.pdf" target="_blank" rel="noopener noreferrer">Big O notation</a> measures the complexity of an algorithm by measuring the input to output
execution rate. This rate takes into account programming concepts and elements such as loops and conditional statements.</p>
<p>In general, the fewer elements you have, the faster the execution rate and, thus, the simpler the notation. For Big O, many time
complexities exist; however, these six are considered to be the main ones and are encountered most commonly:</p>
<span class="text--center"><p><a href="https://freecodecamp.org/news/big-o-cheat-sheet-time-complexity-chart" target="_blank" rel="noopener noreferrer"><img decoding="async" loading="lazy" src="https://miro.medium.com/v2/resize:fit:720/format:webp/0*VcwxCIytalgxqvGA.png" alt="A colored line chart" title="Big O performance comparison" class="img_Yy5b"></a></p></span>
<ul>
<li><strong>O(1)</strong> Constant Time</li>
<li><strong>O(n)</strong> Linear Time</li>
<li><strong>O(log n)</strong> Logarithmic Time</li>
<li><strong>O(n¬≤)</strong> Quadratic Time</li>
<li><strong>O(2‚Åø)</strong> Exponential Time</li>
<li><strong>O(n!)</strong> Factorial Time</li>
</ul>
<p>As can be seen from the chart, time complexities differ in performance, and thus, the goal is to optimize the implementation to be as simple
as possible.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="noopener noreferrer">JavaScript</a> is used for the appropriate examples.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="o1-constant-time">O(1) Constant Time<a href="https://eldarlrd.github.io/eldarlrd/blog/2024/07/19/big-o#o1-constant-time" class="hash-link" aria-label="Direct link to O(1) Constant Time" title="Direct link to O(1) Constant Time">‚Äã</a></h3>
<p>Constant time algorithms are independent of the input and therefore always execute with the exact same speed.</p>
<div class="language-javascript codeBlockContainer_CKpi theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockTitle_VOdg">Check if a number is even or odd.</div><div class="codeBlockContent_NzkF"><pre tabindex="0" class="prism-code language-javascript codeBlock_PR2Q thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_OTly"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(153, 76, 195);font-style:italic">isEven</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token parameter">n</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(12, 150, 155)">=&gt;</span><span class="token plain"> n </span><span class="token operator" style="color:rgb(12, 150, 155)">%</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">===</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">0</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><br></span></code></pre><div class="buttonGroup_Qkxi"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_skLb" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_K7NZ"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_NGXR"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That's because this function has only a single execution step.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="on-linear-time">O(n) Linear Time<a href="https://eldarlrd.github.io/eldarlrd/blog/2024/07/19/big-o#on-linear-time" class="hash-link" aria-label="Direct link to O(n) Linear Time" title="Direct link to O(n) Linear Time">‚Äã</a></h3>
<p>Linear time algorithms are linearly dependent on the input. As in, as the input increases in size, so does the number of execution steps
required.</p>
<div class="language-javascript codeBlockContainer_CKpi theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockTitle_VOdg">Sum all the values in an array.</div><div class="codeBlockContent_NzkF"><pre tabindex="0" class="prism-code language-javascript codeBlock_PR2Q thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_OTly"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(153, 76, 195);font-style:italic">sumArray</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token parameter">n</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(12, 150, 155)">=&gt;</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token method function property-access" style="color:rgb(153, 76, 195);font-style:italic">reduce</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token parameter">sum</span><span class="token parameter punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token parameter"> value</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(12, 150, 155)">=&gt;</span><span class="token plain"> sum </span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token plain"> value</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">0</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><br></span></code></pre><div class="buttonGroup_Qkxi"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_skLb" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_K7NZ"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_NGXR"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="olog-n-logarithmic-time">O(log n) Logarithmic Time<a href="https://eldarlrd.github.io/eldarlrd/blog/2024/07/19/big-o#olog-n-logarithmic-time" class="hash-link" aria-label="Direct link to O(log n) Logarithmic Time" title="Direct link to O(log n) Logarithmic Time">‚Äã</a></h3>
<p>Logarithmic time algorithms are dependent on the logarithm of the input, meaning that the execution steps decrease as the input size
increases.</p>
<div class="language-javascript codeBlockContainer_CKpi theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockTitle_VOdg">Searching through a binary search tree.</div><div class="codeBlockContent_NzkF"><pre tabindex="0" class="prism-code language-javascript codeBlock_PR2Q thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_OTly"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(153, 76, 195);font-style:italic">searchBST</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token parameter">node</span><span class="token parameter punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token parameter"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(12, 150, 155)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token operator" style="color:rgb(12, 150, 155)">!</span><span class="token plain">node </span><span class="token operator" style="color:rgb(12, 150, 155)">||</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token property-access">value</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">===</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">return</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">return</span><span class="token plain"> n </span><span class="token operator" style="color:rgb(12, 150, 155)">&lt;</span><span class="token plain"> node</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token property-access">value</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">?</span><span class="token plain"> </span><span class="token function" style="color:rgb(153, 76, 195);font-style:italic">searchBST</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token property-access">left</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(153, 76, 195);font-style:italic">searchBST</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token property-access">right</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><br></span></code></pre><div class="buttonGroup_Qkxi"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_skLb" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_K7NZ"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_NGXR"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="on-quadratic-time">O(n¬≤) Quadratic Time<a href="https://eldarlrd.github.io/eldarlrd/blog/2024/07/19/big-o#on-quadratic-time" class="hash-link" aria-label="Direct link to O(n¬≤) Quadratic Time" title="Direct link to O(n¬≤) Quadratic Time">‚Äã</a></h3>
<p>Quadratic time algorithms double in their execution steps. This commonly happens due to operations such as nested loops.</p>
<div class="language-javascript codeBlockContainer_CKpi theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockTitle_VOdg">Checking for duplicate elements in an array.</div><div class="codeBlockContent_NzkF"><pre tabindex="0" class="prism-code language-javascript codeBlock_PR2Q thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_OTly"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(153, 76, 195);font-style:italic">hasDuplicates</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token parameter">n</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(12, 150, 155)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(12, 150, 155)">in</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> j </span><span class="token keyword" style="color:rgb(12, 150, 155)">in</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">i </span><span class="token operator" style="color:rgb(12, 150, 155)">!==</span><span class="token plain"> j </span><span class="token operator" style="color:rgb(12, 150, 155)">&amp;&amp;</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(153, 76, 195)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">===</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(153, 76, 195)">]</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">return</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(188, 84, 84)">true</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">return</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(188, 84, 84)">false</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><br></span></code></pre><div class="buttonGroup_Qkxi"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_skLb" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_K7NZ"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_NGXR"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="o2‚Åø-exponential-time">O(2‚Åø) Exponential Time<a href="https://eldarlrd.github.io/eldarlrd/blog/2024/07/19/big-o#o2%E2%81%BF-exponential-time" class="hash-link" aria-label="Direct link to O(2‚Åø) Exponential Time" title="Direct link to O(2‚Åø) Exponential Time">‚Äã</a></h3>
<p>Exponential time algorithms increase in execution steps exponentially depending on the size of the input. This often happens with recursive
functions, a classic example of which is shown below.</p>
<div class="language-javascript codeBlockContainer_CKpi theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockTitle_VOdg">Find the nth Fibonacci number.</div><div class="codeBlockContent_NzkF"><pre tabindex="0" class="prism-code language-javascript codeBlock_PR2Q thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_OTly"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(153, 76, 195);font-style:italic">fibonacci</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token parameter">n</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(12, 150, 155)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">n </span><span class="token operator" style="color:rgb(12, 150, 155)">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">1</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">return</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(153, 76, 195);font-style:italic">fibonacci</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">n </span><span class="token operator" style="color:rgb(12, 150, 155)">-</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">1</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token plain"> </span><span class="token function" style="color:rgb(153, 76, 195);font-style:italic">fibonacci</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">n </span><span class="token operator" style="color:rgb(12, 150, 155)">-</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">2</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><br></span></code></pre><div class="buttonGroup_Qkxi"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_skLb" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_K7NZ"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_NGXR"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="on-factorial-time">O(n!) Factorial Time<a href="https://eldarlrd.github.io/eldarlrd/blog/2024/07/19/big-o#on-factorial-time" class="hash-link" aria-label="Direct link to O(n!) Factorial Time" title="Direct link to O(n!) Factorial Time">‚Äã</a></h3>
<p>Factorial time algorithms have execution steps that grow factorially with the size of the input. This results in the worst performance
possible.</p>
<div class="language-javascript codeBlockContainer_CKpi theme-code-block" style="--prism-color:#403f53;--prism-background-color:#FBFBFB"><div class="codeBlockTitle_VOdg">Generate all permutations of an array.</div><div class="codeBlockContent_NzkF"><pre tabindex="0" class="prism-code language-javascript codeBlock_PR2Q thin-scrollbar" style="color:#403f53;background-color:#FBFBFB"><code class="codeBlockLines_OTly"><span class="token-line" style="color:#403f53"><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(153, 76, 195);font-style:italic">permuteArray</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token parameter">n</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(12, 150, 155)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> result </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">[</span><span class="token punctuation" style="color:rgb(153, 76, 195)">]</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token keyword" style="color:rgb(12, 150, 155)">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(153, 76, 195);font-style:italic">permutate</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token parameter">currArr</span><span class="token parameter punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token parameter"> remainArr</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(12, 150, 155)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">remainArr</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:rgb(12, 150, 155)">===</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">0</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"> result</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token method function property-access" style="color:rgb(153, 76, 195);font-style:italic">push</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">currArr</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">      </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token keyword" style="color:rgb(12, 150, 155)">let</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(12, 150, 155)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">0</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"> i </span><span class="token operator" style="color:rgb(12, 150, 155)">&lt;</span><span class="token plain"> remainArr</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"> i</span><span class="token operator" style="color:rgb(12, 150, 155)">++</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">        </span><span class="token function" style="color:rgb(153, 76, 195);font-style:italic">permutate</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(153, 76, 195)">[</span><span class="token spread operator" style="color:rgb(12, 150, 155)">...</span><span class="token plain">currArr</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> remainArr</span><span class="token punctuation" style="color:rgb(153, 76, 195)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(153, 76, 195)">]</span><span class="token punctuation" style="color:rgb(153, 76, 195)">]</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(153, 76, 195)">[</span><span class="token spread operator" style="color:rgb(12, 150, 155)">...</span><span class="token plain">remainArr</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token method function property-access" style="color:rgb(153, 76, 195);font-style:italic">slice</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token number" style="color:rgb(170, 9, 130)">0</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(12, 150, 155)">...</span><span class="token plain">remainArr</span><span class="token punctuation" style="color:rgb(153, 76, 195)">.</span><span class="token method function property-access" style="color:rgb(153, 76, 195);font-style:italic">slice</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token plain">i </span><span class="token operator" style="color:rgb(12, 150, 155)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(170, 9, 130)">1</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token function" style="color:rgb(153, 76, 195);font-style:italic">permutate</span><span class="token punctuation" style="color:rgb(153, 76, 195)">(</span><span class="token punctuation" style="color:rgb(153, 76, 195)">[</span><span class="token punctuation" style="color:rgb(153, 76, 195)">]</span><span class="token punctuation" style="color:rgb(153, 76, 195)">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(153, 76, 195)">)</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain">  </span><span class="token keyword control-flow" style="color:rgb(12, 150, 155)">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#403f53"><span class="token plain"></span><span class="token punctuation" style="color:rgb(153, 76, 195)">}</span><span class="token punctuation" style="color:rgb(153, 76, 195)">;</span><br></span></code></pre><div class="buttonGroup_Qkxi"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_skLb" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_K7NZ"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_NGXR"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This concludes a brief explanation of the mathematical concept of Big O notation and its implications in software development.</p>
<p>Happy Coding!</p>]]></content:encoded>
            <author>eldarlrd@pm.me (Eldar Pashazade)</author>
            <category>computer-science</category>
            <category>math</category>
        </item>
        <item>
            <title><![CDATA[üîë Licenses]]></title>
            <link>https://eldarlrd.github.io/eldarlrd/blog/2023/08/23/licenses</link>
            <guid>https://eldarlrd.github.io/eldarlrd/blog/2023/08/23/licenses</guid>
            <pubDate>Wed, 23 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[A brief explanation of copyright, trademarks, patents, and software licenses from a historical perspective and the open source movement.]]></description>
            <content:encoded><![CDATA[<p><strong>A brief explanation of copyright, trademarks, patents, and software licenses from a historical perspective and the open source movement.</strong></p>
<p>In 1886, ten European countries convened in <em>Berne, Switzerland,</em> to sign the legal principles on the protection of the rights of artists,
architects, and the common man. This was done primarily to counter the companies of the time that would steal a foreign artist's work,
modify it, and then resell it under their own brand for profit. Prior to this convention, combating such behavior would require the artist
to explicitly state copyright and then go on to personally defend it in court.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="copyright">Copyright<a href="https://eldarlrd.github.io/eldarlrd/blog/2023/08/23/licenses#copyright" class="hash-link" aria-label="Direct link to Copyright" title="Direct link to Copyright">‚Äã</a></h3>
<p>After the <a href="https://wipo.int/treaties/en/ip/berne" target="_blank" rel="noopener noreferrer">Berne Convention,</a> copyright was automatically asserted as soon as the work was created.
As in, as soon as artistic work is made, it is already copyrighted by the creator, and thus it'll be protected. This work includes anything
like text, images, architecture, hardware, etc. The convention has now been ratified in nearly all countries in the world.</p>
<p>But then, why do we keep seeing ¬©, (c), and "Copyright" notices everywhere? There are two reasons.</p>
<p>First, the U.S. did not ratify the convention <a href="https://copyright.gov/title17/92appk.pdf" target="_blank" rel="noopener noreferrer">until 1989,</a> but instead they opted to make
explicit copyright assertions easier by creating the ¬© sign and requiring its presence on any work of art alongside the name of the artist
and the date of production. Because of this, until ratification, artists were required to put ¬© on the work for it to be considered
copyrighted.</p>
<p>Second, the reason why artists and companies insist on using the ¬©, (c), and/or "Copyright" is because explicit statements make it easier to
defend the copyright in court.</p>
<p>Why (c)? Because typical typewriters don't have the ¬© sign, it'd get approximated to (c).</p>
<p>All copyrights, trademarks, and patents are recognized by all the members of the convention. The word "Copyright" must always be written in
English.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="trademark">Trademark<a href="https://eldarlrd.github.io/eldarlrd/blog/2023/08/23/licenses#trademark" class="hash-link" aria-label="Direct link to Trademark" title="Direct link to Trademark">‚Äã</a></h3>
<p>Trademarks, often indicated with ‚Ñ¢, are a way of registering a brand name, logo, slogan, etc. so that the product can have an official
signature of being genuine. Coca-Cola is a trademarked brand name; one can't release their own product under that name to lure potential
customers into buying their product instead. Trademarks have to be renewed with the body that issued them.</p>
<p>Registered trademarks carry the ¬Æ symbol, which signifies that the trademark has
been <a href="https://uspto.gov/sites/default/files/trademarks/law/Trademark_Statutes.pdf" target="_blank" rel="noopener noreferrer">officially registered</a> by the appropriate state office.
It, too, is sometimes approximated to (r).</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="patents">Patents<a href="https://eldarlrd.github.io/eldarlrd/blog/2023/08/23/licenses#patents" class="hash-link" aria-label="Direct link to Patents" title="Direct link to Patents">‚Äã</a></h3>
<p>Patents are a way of registering an invention by publishing the schematics for it publicly and, in return, getting a 20 year
grant <a href="https://uspto.gov/web/offices/pac/mpep/consolidated_laws.pdf" target="_blank" rel="noopener noreferrer">enforced by the state</a> to be the sole producer of the given invention.
It's meant to reward and incentivize inventions by giving the innovator a headstart so that they can capitalize on their idea and make a
profit. However, after 20 years, the patent expires and cannot be renewed. Meaning every other interested body can now produce the same
invention themselves using the public schematics.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="software-licenses">Software Licenses<a href="https://eldarlrd.github.io/eldarlrd/blog/2023/08/23/licenses#software-licenses" class="hash-link" aria-label="Direct link to Software Licenses" title="Direct link to Software Licenses">‚Äã</a></h3>
<p>If one desires to share the right to modify, publish, or resell work, they have to provide a license. They're a lease given by the copyright
holder that allows some other body to interact with the work in the capacity that is provided in the license. It's recommended that one use
officially registered licenses and not create their own, since said licenses have already likely been defended in court.</p>
<p>There are many different types of licenses for various categories of work, Software is considered to be <em>text material</em> and has its own
commonly used set of <a href="https://opensource.org/licenses" target="_blank" rel="noopener noreferrer">open source licenses.</a></p>
<span class="text--center"><p><a href="https://github.blog/2015-03-09-open-source-license-usage-on-github-com" target="_blank" rel="noopener noreferrer"><img decoding="async" loading="lazy" src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*veAZORAsRKvXWCjlHA_nuA.png" alt="A colored pie chart" title="2015 GitHub statistics for license use" class="img_Yy5b"></a></p></span>
<p>The most popular license now is the permissive <a href="https://mit-license.org/" target="_blank" rel="noopener noreferrer">MIT License,</a> which allows anyone to copy, modify, and republish
work as well as use it as a part of proprietary software for profit. This is the license that companies like to work with since it allows
them to use the program with the fewest strings attached.</p>
<p>Another common open source license is the <a href="https://apache.org/licenses/LICENSE-2.0.html" target="_blank" rel="noopener noreferrer">Apache 2.0 License,</a> which is quite similar but
more elaborate in its wording. A similar <a href="https://isc.org/licenses" target="_blank" rel="noopener noreferrer">ISC License</a> is used by default for npm packages.</p>
<p>There are also more restrictive licenses, like the ones made by the <a href="https://fsf.org/" target="_blank" rel="noopener noreferrer">Free Software Foundation.</a> The Linux kernel is
licensed under <a href="https://gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener noreferrer">GPLv2,</a> and many more recent programs are licensed
under <a href="https://gnu.org/licenses/gpl-3.0.html" target="_blank" rel="noopener noreferrer">GPLv3.</a> Another license of the same family, <a href="https://gnu.org/licenses/lgpl-3.0.html" target="_blank" rel="noopener noreferrer">LGPLv3,</a>
is used for various software libraries. <a href="https://gnu.org/licenses/agpl-3.0.html" target="_blank" rel="noopener noreferrer">AGPLv3</a> additionally covers software that's <em>shared over
networks</em> like websites.</p>
<p>Yet another popular family of licenses includes the <a href="https://opensource.org/license/BSD-3-clause" target="_blank" rel="noopener noreferrer">BSD 3-Clause License</a> and the more
permissive <a href="https://opensource.org/license/bsd-2-clause" target="_blank" rel="noopener noreferrer">BSD 2-Clause License.</a></p>
<p>The less elaborate <a href="https://opensource.org/license/unlicense" target="_blank" rel="noopener noreferrer">Unlicense</a> and the
meme <a href="http://wtfpl.net/about" target="_blank" rel="noopener noreferrer">Do What the F*** You Want To Public License</a> are about as permissive as one can get.</p>
<p>A couple of useful tools to help pick a license most suitable for one's software are <a href="https://choosealicense.com/" target="_blank" rel="noopener noreferrer">Choose a License</a> and
the <a href="https://ufal.github.io/public-license-selector" target="_blank" rel="noopener noreferrer">License Selector.</a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_ndgw" id="licensing-process">Licensing Process<a href="https://eldarlrd.github.io/eldarlrd/blog/2023/08/23/licenses#licensing-process" class="hash-link" aria-label="Direct link to Licensing Process" title="Direct link to Licensing Process">‚Äã</a></h3>
<p>Publicizing the software source code alone <em>does not suffice to make it truly open source.</em> The code in such an instance is only free to
observe but cannot be freely worked on.</p>
<p>To make the code open, it has to be licensed. This can be done
in <a href="https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository" target="_blank" rel="noopener noreferrer">various ways,</a>
by either including the license as a text file at the root of the project and/or putting explicit notices as comments at the top of the
files.</p>
<p>Some licenses allow modification of their clauses and notices, while others do not.</p>
<p>When you specify the license used, it's recommended to use the official <a href="https://spdx.org/licenses" target="_blank" rel="noopener noreferrer">SPDX identifier.</a> Apache 2.0 would be
specified as "Apache-2.0".</p>
<p>An example <a href="https://jsdoc.app/tags-license.html" target="_blank" rel="noopener noreferrer">license notice</a> in a JavaScript file as instructed by JSDoc.</p>
<p>The license file may get separated from the source code; however, with appropriate notices, the licensing is more explicit and permanent.</p>
<p>Hopefully this has been an insightful dive into the topic of copyright and licensing, helping you pick a license for your next project.</p>
<p>Happy Coding!</p>]]></content:encoded>
            <author>eldarlrd@pm.me (Eldar Pashazade)</author>
            <category>open-source</category>
            <category>free-software</category>
            <category>foss</category>
        </item>
    </channel>
</rss>